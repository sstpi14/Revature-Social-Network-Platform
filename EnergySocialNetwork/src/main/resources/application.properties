server.port=9000

#same information that we needed for JDBC will go here
#${} - grabs environmental variables
#spring.datasource.url=jdbc:postgresql://${AWS_RDS_ENDPOINT}/socialmedia
#spring.datasource.username=${RDS_USERNAME}
#spring.datasource.password=${RDS_PASSWORD}
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect

# DDL auto is how we will deal with what happens to our schema when the app runs

# create - drops all existing tables and other objects and recreates them / do create while you are working on building a schema to like
# validate - checks to make sure schema exists as expected before making operations / do validate once schema is finished being built
# update - will not delete anything, it will only add/modify existing schemas
# create-drop - hibernate will create your schema then delete it when the application ends

spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true

spring.datasource.url=jdbc:h2:./h2/db
spring.datasource.username=sa
spring.datasource.password=sa
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

aws.bucket.name=energy-social-network-s3bucket
aws.keyId=AKIARSHEV3QQ3RJF4QUF
aws.accessKey=pbxLibicUsO7oa7o7HoX/IT3xomQjDAGS4sWF5zD
aws.region=us-east-2